// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Team {
	id String @id @default(cuid())
	repository Repository[]
	accounts Account[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
	firstName		  String
	lastName		  String
	role			  String
	team_id			  String
	team Team @relation(fields: [team_id], references: [id])
}

model Branch {
	id	String @id @default(cuid())
	repository_id String
	name String
	label String
	url String
	updates ComponentUpdate[]
	pullRequest PullRequest?
	date_modified DateTime @default(now())
}

model ComponentUpdate {
	id String @id @default(cuid())
	branch_id String
	branch Branch @relation(fields: [branch_id], references: [id])
	component_id String
	component_parent_id String
	component ComponentElement @relation(fields: [component_id, component_parent_id], references: [id, parent_id], onDelete: Cascade)
	type String //text, className, component
	action String //change, add, remove
	name String
	value String
	old_value String
	date_modified DateTime @default(now())
}

model PullRequest {
	id String @id @default(cuid())
	repository_id String
	title String
	body String
	url String
	branch_id String @unique
	branch Branch @relation(fields: [branch_id], references: [id])
}

model Location {
	id String @id @default(cuid())
	file String
	start Int
	end Int

	component ComponentElement[]
	attribute ComponentAttribute[]
	definition ComponentDefinition?
}

model ComponentElement {
	id String
	repository_id String
	name String
	children ComponentElement[] @relation("children")
	location_id String
	location Location @relation(fields: [location_id], references: [id])
	parent_id String
	parent_parent_id String?
	parent ComponentElement? @relation(name: "children", fields: [parent_id, parent_parent_id], references: [id, parent_id])
	definition_id String
	definition ComponentDefinition @relation(name: "definition", fields: [definition_id], references: [id])
	attributes ComponentAttribute[]
	updates ComponentUpdate[]

	@@id([id, parent_id])
}

model ComponentAttribute {
	id String @id @default(cuid())
	type String
	name String
	value String
	component_id String
	component_parent_id String
	component ComponentElement @relation(fields: [component_id, component_parent_id], references: [id, parent_id], onDelete: Cascade)
	location_id String
	location Location @relation(fields: [location_id], references: [id])
}

model ComponentDefinition {
	id String @id @default(cuid())
	repository_id String
	name String @unique
	children ComponentElement[] @relation("definition")
	location_id String @unique
	location Location @relation(fields: [location_id], references: [id])
}

model Repository {
	id String @id @default(cuid())
	team_id String
	name String
	owner String
	branch String
	installationId Int
	team Team @relation(fields: [team_id], references: [id])
	css_framework String
	//TODO: We don't need this in the future hopefully
	tailwind_prefix String?
}