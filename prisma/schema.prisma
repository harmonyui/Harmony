// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
		firstName					String
		lastName					String
		role							String
}

model Branch {
	id	String @id @default(cuid())
	name String
	label String
}

model ComponentElement {
	id String @id @default(cuid())
	name String
	children ComponentElement[] @relation("children")
	file String
	start Int
	end Int
	parent_id String?
	parent ComponentElement? @relation(name: "children", fields: [parent_id], references: [id])
	definition_id String
	definition ComponentDefinition @relation(name: "definition", fields: [definition_id], references: [id])
}

model ComponentDefinition {
	id String @id @default(cuid())
	name String @unique
	children ComponentElement[] @relation("definition")
	file String
	start Int
	end Int
}

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }
