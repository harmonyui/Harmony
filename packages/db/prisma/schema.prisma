// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
  output     = "../lib/generated/client"
}

datasource db {
  provider = "postgres"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Team {
  id          String      @id @default(cuid())
  accounts    Account[]
  workspaces  Workspace[]
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
}

model Workspace {
  id            String     @id @default(cuid())
  name          String
  team_id       String
  team          Team       @relation(fields: [team_id], references: [id])
  repository    Repository?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
}

// Necessary for Next auth
model Account {
  id                  String   @id @default(cuid())
  userId              String
  firstName           String
  lastName            String
  role                String
  contact             String
  team_id             String
  seen_welcome_screen Boolean  @default(false)
  team                Team     @relation(fields: [team_id], references: [id])
  branch              Branch[]
  chat_bubbles        ChatBubble[]
}

model Branch {
  id            String            @id @default(cuid())
  repository_id String
  name          String
  label         String
  url           String
  updates       ComponentUpdate[]
  pullRequest   PullRequest?
  date_modified DateTime          @default(now())
  is_deleted    Boolean           @default(false)
  account_id    String
  account       Account           @relation(fields: [account_id], references: [id])
  chat_bubbles  ChatBubble[]
}

model ComponentUpdate {
  id            String   @id @default(cuid())
  branch_id     String
  branch        Branch   @relation(fields: [branch_id], references: [id])
  component_id  String
  childIndex    Int
  type          String //text, className, component
  name          String
  value         String
  old_value     String
  is_global     Boolean
  order         Int
  date_modified DateTime @default(now())
}

model PullRequest {
  id            String @id @default(cuid())
  repository_id String
  title         String
  body          String
  url           String
  branch_id     String @unique
  branch        Branch @relation(fields: [branch_id], references: [id])
}

model Location {
  id    String @id @default(cuid())
  file  String
  start Int
  end   Int

  component  ComponentElement[]
  attribute  ComponentAttribute[]
  definition ComponentDefinition?
}

model ComponentElement {
  id                   String
  repository_id        String
  name                 String
  children             ComponentElement[]   @relation("children")
  location_id          String
  location             Location             @relation(fields: [location_id], references: [id])
  parent_id            String?
  parent               ComponentElement?    @relation(name: "children", fields: [parent_id], references: [id])
  definition_id        String
  definition           ComponentDefinition  @relation(name: "definition", fields: [definition_id], references: [id])
  attributes           ComponentAttribute[] @relation(name: "component")
  reference_attributes ComponentAttribute[] @relation(name: "reference")
  version              String

  @@id([id])
}

model ComponentError {
  id            String @id @default(cuid())
  component_id  String
  repository_id String
  type          String
}

model ComponentAttribute {
  id                     String           @id @default(cuid())
  type                   String
  name                   String
  value                  String
  component_id           String
  component              ComponentElement @relation(name: "component", fields: [component_id], references: [id], onDelete: Cascade)
  reference_component_id String
  reference_component    ComponentElement @relation(name: "reference", fields: [reference_component_id], references: [id], onDelete: Cascade)
  location_id            String
  location               Location         @relation(fields: [location_id], references: [id])
  index                  Int
}

model ComponentDefinition {
  id            String             @id @default(cuid())
  repository_id String
  name          String
  children      ComponentElement[] @relation("definition")
  location_id   String             @unique
  location      Location           @relation(fields: [location_id], references: [id])
}

model Repository {
  id              String  @id @default(cuid())
  workspace_id    String @unique
  workspace       Workspace    @relation(fields: [workspace_id], references: [id])
  name            String
  owner           String
  branch          String
  installationId  Int
  ref             String
  css_framework   String
  default_url     String
  //TODO: We don't need this in the future hopefully
  tailwind_prefix String?
  tailwind_config String
  prettier_config String
  config          Json
}

model ChangeLog {
  id           String   @id @default(cuid())
  release_date DateTime @default(now())
  version      String
  features     String
  bugs         String
}

model User {
  id   String @id
  role String
}

model ChatBubble {
  id         String   @id @default(cuid())
  branch_id  String
  branch     Branch   @relation(fields: [branch_id], references: [id])
  component_id String
  content    String
  offset_x   Float
  offset_y   Float
  account_id String?
  account    Account? @relation(fields: [account_id], references: [id])
  created_at DateTime @default(now())

  @@index([branch_id])
  @@index([component_id])
}
